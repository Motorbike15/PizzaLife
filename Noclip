local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local PhysicsService = game:GetService("PhysicsService")

local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local noclipEnabled = false
local noclipCollisionGroupName = "NoclipPlayers"

PhysicsService:CreateCollisionGroup(noclipCollisionGroupName)
PhysicsService:CollisionGroupSetCollidable(noclipCollisionGroupName, "Default", false)

local function toggleNoclip()
    noclipEnabled = not noclipEnabled

    if noclipEnabled then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                PhysicsService:SetPartCollisionGroup(part, noclipCollisionGroupName)
            end
        end
        humanoid:SetState(Enum.HumanoidStateType.Physics)
        -- Optional: Visual feedback
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0.5
            end
        end
    else
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                PhysicsService:SetPartCollisionGroup(part, "Default")
            end
        end
        humanoid:SetState(Enum.HumanoidStateType.Running)
        -- Optional: Revert visual feedback
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0
            end
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.E and not gameProcessedEvent then
        toggleNoclip()
    end
end)

localPlayer.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    if noclipEnabled then
        toggleNoclip() --Reapply if player respawns while noclip is active.
    end
end)
